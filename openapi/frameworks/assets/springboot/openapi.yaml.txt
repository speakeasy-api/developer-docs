openapi: 3.1.0
info:
  title: Book Store API
  description: API for managing a book store inventory and orders
  termsOfService: https://bookstore.example.com/terms
  contact:
    name: API Support
    url: https://bookstore.example.com/support
    email: support@bookstore.example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: http://localhost:8080
  description: Local server
- url: https://api.bookstore.example.com
  description: Production server
tags:
- name: Orders
  description: Order management APIs
- name: Publications
  description: Publications management APIs
paths:
  /orders/{id}/status:
    put:
      tags:
      - Orders
      summary: Update order status
      description: Update the status of an existing order
      operationId: updateOrderStatus
      parameters:
      - name: id
        in: path
        description: ID of the order to update
        required: true
        schema:
          type: string
      - name: status
        in: query
        description: New status for the order
        required: true
        schema:
          type: string
          description: Possible statuses for an order
          enum:
          - PENDING
          - SHIPPED
          - DELIVERED
          - CANCELLED
      responses:
        "200":
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Order not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "400":
          description: Invalid status
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /publications:
    get:
      tags:
      - Publications
      summary: List all publications
      description: Get a list of all publications in the store
      operationId: listPublications
      responses:
        "200":
          description: Successful operation
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PublicationListItem"
      x-speakeasy-retries:
        statusCodes:
        - 5XX
        backoff:
          initialInterval: 500
          maxInterval: 60000
          maxElapsedTime: 3600000
          exponent: 1.5
        strategy: backoff
        retryConnectionErrors: true
    post:
      tags:
      - Publications
      summary: Create a new publication
      description: Add a new publication to the store
      operationId: createPublication
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: "#/components/schemas/Book"
              - $ref: "#/components/schemas/Magazine"
        required: true
      responses:
        "400":
          description: Invalid input
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: Successful operation
          content:
            '*/*':
              schema:
                oneOf:
                - $ref: "#/components/schemas/Book"
                - $ref: "#/components/schemas/Magazine"
  /orders:
    get:
      tags:
      - Orders
      summary: List all orders
      description: Get a list of all orders in the system
      operationId: listOrders
      responses:
        "200":
          description: Successful operation
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
    post:
      tags:
      - Orders
      summary: Create a new order
      description: Create a new order for publications
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
        required: true
      responses:
        "400":
          description: Invalid input
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
  /orders/{id}/cancel:
    post:
      tags:
      - Orders
      summary: Cancel an order
      description: Cancel an existing order
      operationId: cancelOrder
      parameters:
      - name: id
        in: path
        description: ID of the order to cancel
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Order not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: Order cancelled successfully
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Order cannot be cancelled
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /publications/{id}:
    get:
      tags:
      - Publications
      summary: Get a publication by ID
      description: Retrieves a publication's details by its unique identifier
      operationId: getPublication
      parameters:
      - name: id
        in: path
        description: ID of the publication to retrieve
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Publication not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "200":
          description: Successful operation
          content:
            '*/*':
              schema:
                oneOf:
                - $ref: "#/components/schemas/Book"
                - $ref: "#/components/schemas/Magazine"
  /orders/{id}:
    get:
      tags:
      - Orders
      summary: Get an order by ID
      description: Retrieves an order's details by its ID
      operationId: getOrder
      parameters:
      - name: id
        in: path
        description: ID of the order to retrieve
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Order not found
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    Book:
      allOf:
      - $ref: "#/components/schemas/Publication"
      - type: object
        properties:
          type:
            type: string
            default: Book
            description: Type of the publication
            enum:
            - Book
            example: Book
            readOnly: true
          author:
            type: string
            description: Author of the book
            example: Craig Walls
          isbn:
            type: string
            description: ISBN of the book
            example: 978-1617292545
      description: Represents a book in the store
      required:
      - type
    Magazine:
      allOf:
      - $ref: "#/components/schemas/Publication"
      - type: object
        properties:
          type:
            type: string
            default: Magazine
            description: Type of the publication
            enum:
            - Magazine
            example: Magazine
            readOnly: true
          issueNumber:
            type: integer
            format: int32
            description: Issue number of the magazine
            example: 42
          publisher:
            type: string
            description: Publisher of the magazine
            example: National Geographic Society
      description: Represents a magazine in the store
      required:
      - type
    Order:
      description: Represents an order for publications
      properties:
        id:
          type: string
          description: Unique identifier for the order
          example: ord-123456
        customerId:
          type: string
          description: Customer who placed the order
          example: cust-789012
        items:
          type: array
          description: List of items in the order
          items:
            $ref: "#/components/schemas/PublicationListItem"
          minItems: 1
        totalPrice:
          type: number
          format: float
          description: Total price of the order
          example: 89.97
        status:
          type: string
          description: Possible statuses for an order
          enum:
          - PENDING
          - SHIPPED
          - DELIVERED
          - CANCELLED
    Publication:
      description: Represents a publication in the store
      discriminator:
        propertyName: type
        mapping:
          Book: "#/components/schemas/Book"
          Magazine: "#/components/schemas/Magazine"
      properties:
        id:
          type: string
          description: Unique identifier of the publication
          example: 123e4567-e89b-12d3-a456-426614174000
        title:
          type: string
          description: Title of the publication
          example: Spring Boot in Action
        publishDate:
          type: string
          description: Publication date
          example: 2023-06-15
        price:
          type: number
          format: float
          description: Price in USD
          example: 39.99
        type:
          type: string
          description: Type of the publication
          enum:
          - Book
          - Magazine
          example: Book
    PublicationListItem:
      allOf:
      - $ref: "#/components/schemas/Publication"
      description: Represents an item in a list of publications
      discriminator:
        propertyName: type
        mapping:
          Book: "#/components/schemas/Book"
          Magazine: "#/components/schemas/Magazine"
      oneOf:
      - $ref: "#/components/schemas/Book"
      - $ref: "#/components/schemas/Magazine"
    ErrorResponse:
      description: Represents an error response
      properties:
        code:
          type: integer
          format: int32
          description: Error code
          example: 404
        message:
          type: string
          description: Error message
          example: Publication not found
