name: Site build preview

on:
    pull_request:
        types: [opened, synchronize]
        branches:
            - main

env:
    SYNC_REPO: ${{ secrets.SYNC_REPO }}
    SYNC_DIRS: "api-design docs guides mcp openapi"
    BRANCH_NAME: docs-preview/pr-${{ github.event.pull_request.number }}

jobs:
    preview-sync:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout developer-docs PR
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Clone marketing-site preview branch
              env:
                  TOKEN: ${{ secrets.SERVICE_BOT_TOKEN }}
              run: |
                  git clone https://x-access-token:${TOKEN}@github.com/${SYNC_REPO}.git private-repo
                  cd private-repo
                  git checkout -B $BRANCH_NAME

            - name: Sync content folders to preview branch
              run: |
                  set -euo pipefail

                  for dir in $SYNC_DIRS; do
                    src_dir="$dir"
                    dest_dir="private-repo/src/content/$dir"

                    if [ -d "$src_dir" ]; then
                      echo "Syncing $src_dir ‚Üí $dest_dir"
                      rsync -a --delete "$src_dir/" "$dest_dir/"
                    else
                      echo "Warning: $src_dir does not exist, skipping..."
                    fi
                  done

            - name: Commit and push preview branch
              run: |
                  set -euo pipefail
                  cd private-repo

                  git config user.name "Beezy the bot"
                  git config user.email "marketing@speakeasy.com"

                  git add .

                  if git diff --cached --quiet; then
                    echo "No changes to sync for preview"
                    exit 0
                  fi

                  git commit -m "üîç Preview sync from developer-docs PR #${{ github.event.pull_request.number }}"
                  git push origin $BRANCH_NAME --force

    comment-vercel-preview:
        needs: preview-sync
        runs-on: ubuntu-latest

        steps:
            - name: Install jq
              run: sudo apt-get update && sudo apt-get install -y jq

            - name: Wait for Vercel Deployment
              id: wait-for-vercel
              env:
                  VERCEL_TOKEN: ${{ secrets.SERVICE_BOT_VERCEL }}
                  VERCEL_PROJECT_ID: ${{ secrets.MARKETING_SITE_VERCEL_ID }}
                  VERCEL_TEAM_ID: ${{ secrets.VERCEL_TEAM_ID }}
              run: |
                  echo "Waiting 4.5 minutes before polling Vercel..."
                  sleep 270  # 4.5 min

                  polls=0
                  max_polls=20
                  branch="$BRANCH_NAME"

                  while [ $polls -lt $max_polls ]; do
                    echo "‚è≥ Poll #$((polls + 1)) ‚Äî checking Vercel deployment status..."

                    response=$(curl -s -H "Authorization: Bearer $VERCEL_TOKEN" \
                      "https://api.vercel.com/v6/deployments?projectId=$VERCEL_PROJECT_ID&target=preview&teamId=$VERCEL_TEAM_ID&limit=5")

                    deployment_info=$(echo "$response" | jq -r --arg branch "$branch" '
                      .deployments[] | select(.meta.githubBranch == $branch) |
                      {id: .id, url: .url, status: .readyState}
                    ' | jq -s '.[0]')

                    if [ "$deployment_info" != "null" ]; then
                      deploy_id=$(echo "$deployment_info" | jq -r '.id')
                      deploy_url=$(echo "$deployment_info" | jq -r '.url')
                      deploy_status=$(echo "$deployment_info" | jq -r '.status')

                      echo "Status: $deploy_status"

                      if [ "$deploy_status" = "READY" ]; then
                        echo "‚úÖ Deployment is ready at https://$deploy_url"
                        echo "url=https://$deploy_url" >> $GITHUB_OUTPUT
                        echo "comment=‚úÖ **Vercel preview is ready**: [View deployment](https://$deploy_url)" >> $GITHUB_OUTPUT
                        exit 0
                      elif [ "$deploy_status" = "ERROR" ]; then
                        echo "‚ùå Deployment failed"
                        echo "comment=‚ùå **Vercel deployment failed.** Check the [Vercel dashboard](https://vercel.com) for more info." >> $GITHUB_OUTPUT
                        exit 0
                      else
                        echo "üü° Deployment in progress..."
                      fi
                    else
                      echo "‚ö†Ô∏è No deployment found yet for branch $branch"
                    fi

                    polls=$((polls + 1))

                    # First 10 polls use 10s, rest use 30s
                    if [ $polls -lt 10 ]; then
                      sleep 10
                    else
                      sleep 30
                    fi
                  done

                  echo "‚ùå Timed out after $max_polls polls waiting for Vercel deployment."
                  echo "comment=‚ùå **Timed out** waiting for Vercel preview deployment after $(($max_polls < 10 ? 270 + $max_polls * 10 : 270 + 10 * 10 + ($max_polls - 10) * 30)) seconds." >> $GITHUB_OUTPUT
                  exit 0

            - name: Comment with Vercel Preview
              uses: marocchino/sticky-pull-request-comment@v2
              with:
                  message: ${{ steps.wait-for-vercel.outputs.comment }}
