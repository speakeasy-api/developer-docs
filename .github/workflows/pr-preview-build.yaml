name: Site build preview

on:
    pull_request:
        types: [opened, synchronize]
        branches:
            - main

env:
    SYNC_REPO: ${{ secrets.SYNC_REPO }}
    SYNC_DIRS: "api-design docs guides mcp openapi"
    BRANCH_NAME: docs-preview/pr-${{ github.event.pull_request.number }}

jobs:
    preview-sync:
        runs-on: ubuntu-latest
        outputs:
            preview-branch: ${{ env.BRANCH_NAME }}

        steps:
            - name: Checkout developer-docs PR
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Clone marketing-site preview branch
              env:
                  TOKEN: ${{ secrets.SERVICE_BOT_TOKEN }}
              run: |
                  git clone https://x-access-token:${TOKEN}@github.com/${SYNC_REPO}.git private-repo
                  cd private-repo
                  git checkout -B $BRANCH_NAME

            - name: Sync content folders to preview branch
              run: |
                  set -euo pipefail
                  for dir in $SYNC_DIRS; do
                    src_dir="$dir"
                    dest_dir="private-repo/src/content/$dir"
                    if [ -d "$src_dir" ]; then
                      echo "Syncing $src_dir ‚Üí $dest_dir"
                      rsync -a --delete "$src_dir/" "$dest_dir/"
                    else
                      echo "Warning: $src_dir does not exist, skipping..."
                    fi
                  done

            - name: Commit and push preview branch
              run: |
                  set -euo pipefail
                  cd private-repo
                  git config user.name "Beezy the bot"
                  git config user.email "marketing@speakeasy.com"
                  git add .
                  if git diff --cached --quiet; then
                    echo "No changes to sync for preview"
                    exit 0
                  fi
                  git commit -m "üîç Preview sync from developer-docs PR #${{ github.event.pull_request.number }}"
                  git push origin $BRANCH_NAME --force

    wait-and-comment:
        needs: preview-sync
        runs-on: ubuntu-latest

        steps:
            - name: Install dependencies
              run: |
                  sudo apt-get update && sudo apt-get install -y jq
                  npm install -g vercel

            - name: Post "Building..." Sticky Comment
              uses: marocchino/sticky-pull-request-comment@v2
              with:
                  number: ${{ github.event.pull_request.number }}
                  header: VercelPreview
                  message: |
                      üü° **Vercel preview is building...**

            - name: Clone marketing-site preview branch
              env:
                  TOKEN: ${{ secrets.SERVICE_BOT_TOKEN }}
              run: |
                  git clone https://x-access-token:${TOKEN}@github.com/${{ secrets.SYNC_REPO }}.git private-repo
                  cd private-repo
                  git checkout $BRANCH_NAME

            - name: Deploy to Vercel via CLI
              id: deploy
              working-directory: private-repo
              env:
                  VERCEL_TOKEN: ${{ secrets.SERVICE_BOT_VERCEL }}
              run: |
                  output=$(vercel --prebuilt --yes --token $VERCEL_TOKEN --scope ${{ secrets.VERCEL_TEAM_ID }} --confirm)
                  echo "$output"
                  deployment_url=$(echo "$output" | grep -o 'https://[^ ]*\.vercel\.app' | tail -n1)
                  deployment_id=$(echo "$output" | grep -o '"deploymentId":"[^"]*"' | cut -d'"' -f4)
                  echo "deployment-url=$deployment_url" >> $GITHUB_OUTPUT
                  echo "deployment-id=$deployment_id" >> $GITHUB_OUTPUT

            - name: Wait for Vercel Deployment
              id: wait
              uses: vercel/wait-for-deployment@v1
              with:
                  token: ${{ secrets.SERVICE_BOT_VERCEL }}
                  deployment-id: ${{ steps.deploy.outputs.deployment-id }}
                  timeout: 900

            - name: Update Sticky Comment with Success
              if: ${{ steps.wait.outputs.ready-state == 'READY' }}
              uses: marocchino/sticky-pull-request-comment@v2
              with:
                  number: ${{ github.event.pull_request.number }}
                  header: VercelPreview
                  message: |
                      ‚úÖ **Vercel preview is ready!**
                      üîó [View deployment](${{ steps.deploy.outputs.deployment-url }})

            - name: Update Sticky Comment with Failure
              if: ${{ steps.wait.outputs.ready-state != 'READY' }}
              uses: marocchino/sticky-pull-request-comment@v2
              with:
                  number: ${{ github.event.pull_request.number }}
                  header: VercelPreview
                  message: |
                      ‚ùå **Vercel deployment failed.**
